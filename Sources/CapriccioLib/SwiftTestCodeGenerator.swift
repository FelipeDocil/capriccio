//
//  SwiftTestFileGenerator.swift
//  CapriccioLib
//
//  Created by Franco on 03/09/2018.
//

import Foundation
import Stencil

public protocol SwiftTestCodeGenerating {
    func generateSwiftTestCode(forFeature feature: Feature, generatedClassType: String?, templateFilePath: String?, disableSwiftLint: Bool, version: String) -> String
}

public final class SwiftTestCodeGenerator: SwiftTestCodeGenerating {
    public init() { }
    
    public func generateSwiftTestCode(forFeature feature: Feature, generatedClassType: String?, templateFilePath: String?, disableSwiftLint: Bool, version: String) -> String {
        let template: Template
        
        if let templateFilePath = templateFilePath {
            template = try! Template(templateString: String(contentsOfFile: templateFilePath))
        } else {
            template =  Template(templateString: templateString)
        }
        
        let generatedClassType = generatedClassType ?? "XCTestCase"
        
        do {
            let encoder = JSONEncoder()
            let data = try encoder.encode(feature)
            
            let featureDictionary = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [String: Any] ?? [:]
            return try template.render(["feature": featureDictionary, "classType": generatedClassType, "disableSwiftLint": disableSwiftLint, "version": version])
        }
        catch {
            fatalError("Template file rendering failed with error \(error)")
        }
    }
}

/// Simple way of embedding the template given SPM doesn't support resources files yet
private let templateString = """
/**
This code is autogenerated using Capriccio {{ version }} - https://github.com/shibapm/capriccio
DO NOT EDIT
*/

import XCTest
import XCTest_Gherkin

{% if disableSwiftLint %}
// swiftlint:disable all
{% endif %}
final class {{ feature.name }}: {{ classType }} {
    {% for scenario in feature.scenarios %}
    {% if scenario.examples.count > 0 %}
    {% for example in scenario.examples %}
    func test{{ scenario.name }}With{{ example.valuesDescription }}() {
        {% for step in example.steps %}
        {{step.type}}("{{ step.description }}")
    {% endfor %}
    }
    {% endfor %}
    {% else %}
    func test{{ scenario.name }}() {
        {% for step in scenario.steps%}
        {{step.type}}("{{ step.description }}")
        {% endfor %}
    }
    {% endif %}
    {% endfor %}
}
{% if disableSwiftLint %}
// swiftlint:enable all
{% endif %}
"""
